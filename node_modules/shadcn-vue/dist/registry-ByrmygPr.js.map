{"version":3,"file":"registry-ByrmygPr.js","names":["importPath: string","config: TsConfigResult","cwd: string","tsconfigName: 'tsconfig.json' | 'jsconfig.json'","config: RawConfig","config: Config","resolvedAliases: any","resolvedPath: string","key: string","key","fallback: string","cwd: string","shouldThrow: boolean","cwd: string","type: ProjectInfo","defaultProjectInfo: ProjectInfo | null","config: RawConfig","config: Config","text: Options['text']","options?: {\n    silent?: boolean\n  }","error: unknown","tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>['config']\n    | undefined","config: Config","options: {\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n  }","input: string","tailwindConfig: UpdaterTailwindConfig","configObject: ObjectLiteralExpression","property: {\n    name: string\n    value: string\n  }","theme: UpdaterTailwindConfig['theme']","plugin: string","config: Config | null","obj: ObjectLiteralExpression","arr: ArrayLiteralExpression","objectLiteralString: string","node: ObjectLiteralExpression","result: any","node: ArrayLiteralExpression","result: any[]","node: any","cssVars: z.infer<typeof registryItemCssVarsSchema>","result: Record<string, any>","name: string","style: string","baseColor: string","index: z.infer<typeof registryIndexSchema>","names: string[]","tree: z.infer<typeof registryIndexSchema>","entry","index","config: Config","item: Pick<z.infer<typeof registryItemSchema>, 'type'>","override?: string","paths: string[]","path","names: z.infer<typeof registryItemSchema>['name'][]","url: string","payload: string[]","itemUrl: string","url","path: string","registryDependencies: string[]","registryItems: z.infer<typeof registryItemSchema>[]"],"sources":["../src/utils/frameworks.ts","../src/utils/resolve-import.ts","../src/utils/highlighter.ts","../src/utils/get-config.ts","../src/utils/get-package-info.ts","../src/utils/get-project-info.ts","../src/utils/logger.ts","../src/utils/spinner.ts","../src/registry/schema.ts","../src/utils/handle-error.ts","../src/utils/updaters/update-tailwind-config.ts","../src/registry/api.ts"],"sourcesContent":["export const FRAMEWORKS = {\n  vite: {\n    name: 'vite',\n    label: 'Vite',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/vite',\n      tailwind: 'https://tailwindcss.com/docs/guides/vite',\n    },\n  },\n  nuxt: {\n    name: 'nuxt',\n    label: 'Nuxt',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/nuxt',\n      tailwind: 'https://tailwindcss.com/docs/guides/nuxtjs',\n    },\n  },\n  astro: {\n    name: 'astro',\n    label: 'Astro',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/astro',\n      tailwind: 'https://tailwindcss.com/docs/guides/astro',\n    },\n  },\n  laravel: {\n    name: 'laravel',\n    label: 'Laravel',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/laravel',\n      tailwind: 'https://tailwindcss.com/docs/guides/laravel',\n    },\n  },\n  manual: {\n    name: 'manual',\n    label: 'Manual',\n    links: {\n      installation: 'https://shadcn-vue.com/docs/installation/manual',\n      tailwind: 'https://tailwindcss.com/docs/installation',\n    },\n  },\n} as const\n\nexport type Framework = (typeof FRAMEWORKS)[keyof typeof FRAMEWORKS]\n","import { createPathsMatcher, type TsConfigResult } from 'get-tsconfig'\n\nexport function resolveImport(importPath: string, config: TsConfigResult) {\n  const matcher = createPathsMatcher(config)\n  if (matcher === null) {\n    return\n  }\n  const paths = matcher(importPath)\n  return paths[0]\n}\n","import { colors } from 'consola/utils'\n\nexport const highlighter = {\n  error: colors.red,\n  warn: colors.yellow,\n  info: colors.cyan,\n  success: colors.green,\n}\n","import { cosmiconfig } from 'cosmiconfig'\nimport { getTsconfig } from 'get-tsconfig'\nimport path from 'pathe'\nimport { glob } from 'tinyglobby'\nimport { z } from 'zod'\nimport { getProjectInfo } from '@/src/utils/get-project-info'\nimport { resolveImport } from '@/src/utils/resolve-import'\nimport { highlighter } from './highlighter'\n\n/** @deprecated */\nexport const TAILWIND_CSS_PATH = {\n  nuxt: 'assets/css/tailwind.css',\n  vite: 'src/assets/index.css',\n  laravel: 'resources/css/app.css',\n  astro: 'src/styles/globals.css',\n}\n\nexport const DEFAULT_STYLE = 'default'\nexport const DEFAULT_COMPONENTS = '@/components'\nexport const DEFAULT_UTILS = '@/lib/utils'\nexport const DEFAULT_TAILWIND_CSS = TAILWIND_CSS_PATH.nuxt // decide to go with Nuxt's as default\nexport const DEFAULT_TAILWIND_CONFIG = 'tailwind.config.js'\nexport const DEFAULT_TAILWIND_BASE_COLOR = 'slate'\nexport const DEFAULT_TYPESCRIPT_CONFIG = './tsconfig.json'\n\n// zernonia: replaced this from `c12` because it cause error with `components` folder in Nuxt.\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig('components', {\n  searchPlaces: ['components.json'],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    typescript: z.boolean().default(true),\n    tailwind: z.object({\n      config: z.string().optional(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default('').optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      composables: z.string().optional(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      lib: z.string().optional(),\n    }),\n    iconLibrary: z.string().optional(),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    cwd: z.string(),\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    composables: z.string(),\n    lib: z.string(),\n    ui: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\n// TODO: type the key.\n// Okay for now since I don't want a breaking change.\nexport const workspaceConfigSchema = z.record(configSchema)\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  // Set default icon library if not provided.\n  if (!config.iconLibrary) {\n    config.iconLibrary = config.style === 'new-york' ? 'radix' : 'lucide'\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport function getTSConfig(cwd: string, tsconfigName: 'tsconfig.json' | 'jsconfig.json') {\n  const parsedConfig = getTsconfig(path.resolve(cwd, 'package.json'), tsconfigName)\n  if (parsedConfig === null) {\n    throw new Error(\n      `Failed to find ${highlighter.info(tsconfigName)}`,\n    )\n  }\n\n  return parsedConfig\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsconfigType = config.typescript ? 'tsconfig.json' : 'jsconfig.json'\n  const tsConfig = getTSConfig(cwd, tsconfigType)\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      cwd,\n      tailwindConfig: config.tailwind.config\n        ? path.resolve(cwd, config.tailwind.config)\n        : '',\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases.utils, tsConfig),\n      components: await resolveImport(config.aliases.components, tsConfig),\n      ui: config.aliases.ui\n        ? await resolveImport(config.aliases.ui, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.components, tsConfig))\n            ?? cwd,\n            'ui',\n          ),\n      // TODO: Make this configurable.\n      // For now, we assume the lib and hooks directories are one level up from the components directory.\n      lib: config.aliases.lib\n        ? await resolveImport(config.aliases.lib, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.utils, tsConfig)) ?? cwd,\n            '..',\n          ),\n      composables: config.aliases.composables\n        ? await resolveImport(config.aliases.composables, tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases.components, tsConfig))\n            ?? cwd,\n            '..',\n            'composables',\n          ),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n    if (!configResult) {\n      return null\n    }\n\n    return rawConfigSchema.parse(configResult.config)\n  }\n  catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\n  }\n}\n\n// Note: we can check for -workspace.yaml or \"workspace\" in package.json.\n// Since cwd is not necessarily the root of the project.\n// We'll instead check if ui aliases resolve to a different root.\nexport async function getWorkspaceConfig(config: Config) {\n  // eslint-disable-next-line prefer-const\n  let resolvedAliases: any = {}\n\n  for (const key of Object.keys(config.aliases)) {\n    if (!isAliasKey(key, config)) {\n      continue\n    }\n\n    const resolvedPath = config.resolvedPaths[key]\n    const packageRoot = await findPackageRoot(\n      config.resolvedPaths.cwd,\n      resolvedPath,\n    )\n\n    if (!packageRoot) {\n      resolvedAliases[key] = config\n      continue\n    }\n\n    resolvedAliases[key] = await getConfig(packageRoot)\n  }\n\n  const result = workspaceConfigSchema.safeParse(resolvedAliases)\n  if (!result.success) {\n    return null\n  }\n\n  return result.data\n}\n\nexport async function findPackageRoot(cwd: string, resolvedPath: string) {\n  const commonRoot = findCommonRoot(cwd, resolvedPath)\n  const relativePath = path.relative(commonRoot, resolvedPath)\n\n  const packageRoots = await glob('**/package.json', {\n    cwd: commonRoot,\n    deep: 3,\n    ignore: ['**/node_modules/**', '**/dist/**', '**/build/**', '**/public/**'],\n  })\n\n  const matchingPackageRoot = packageRoots\n    .map(pkgPath => path.dirname(pkgPath))\n    .find(pkgDir => relativePath.startsWith(pkgDir))\n\n  return matchingPackageRoot ? path.join(commonRoot, matchingPackageRoot) : null\n}\n\nfunction isAliasKey(\n  key: string,\n  config: Config,\n): key is keyof Config['aliases'] {\n  return Object.keys(config.resolvedPaths)\n    .filter(key => key !== 'utils')\n    .includes(key)\n}\n\nexport function findCommonRoot(cwd: string, resolvedPath: string) {\n  const parts1 = cwd.split(path.sep)\n  const parts2 = resolvedPath.split(path.sep)\n  const commonParts = []\n\n  for (let i = 0; i < Math.min(parts1.length, parts2.length); i++) {\n    if (parts1[i] !== parts2[i]) {\n      break\n    }\n    commonParts.push(parts1[i])\n  }\n\n  return commonParts.join(path.sep)\n}\n\n// TODO: Cache this call.\nexport async function getTargetStyleFromConfig(cwd: string, fallback: string) {\n  const projectInfo = await getProjectInfo(cwd)\n  return projectInfo?.tailwindVersion === 'v4' ? 'new-york-v4' : fallback\n}\n","import type { PackageJson } from 'type-fest'\nimport fs from 'fs-extra'\nimport path from 'pathe'\n\nexport function getPackageInfo(\n  cwd: string = '',\n  shouldThrow: boolean = true,\n): PackageJson | null {\n  const packageJsonPath = path.join(cwd, 'package.json')\n\n  return fs.readJSONSync(packageJsonPath, {\n    throws: shouldThrow,\n  }) as PackageJson\n}\n","import type { Framework } from '@/src/utils/frameworks'\nimport type {\n  Config,\n  RawConfig,\n} from '@/src/utils/get-config'\nimport fs from 'fs-extra'\nimport { parseTsconfig } from 'get-tsconfig'\nimport path from 'pathe'\nimport { glob } from 'tinyglobby'\nimport { z } from 'zod'\nimport { FRAMEWORKS } from '@/src/utils/frameworks'\nimport {\n  getConfig,\n  getTSConfig,\n  resolveConfigPaths,\n} from '@/src/utils/get-config'\nimport { getPackageInfo } from '@/src/utils/get-package-info'\n\nexport type TailwindVersion = 'v3' | 'v4' | null\n\nexport interface ProjectInfo {\n  framework: Framework\n  typescript: boolean\n  tailwindConfigFile: string | null\n  tailwindCssFile: string | null\n  tailwindVersion: TailwindVersion\n  aliasPrefix: string | null\n}\n\nconst PROJECT_SHARED_IGNORE = [\n  '**/node_modules/**',\n  '.nuxt',\n  'public',\n  'dist',\n  'build',\n]\n\nconst TS_CONFIG_SCHEMA = z.object({\n  compilerOptions: z.object({\n    paths: z.record(z.string().or(z.array(z.string()))),\n  }),\n})\n\nexport async function getProjectInfo(cwd: string): Promise<ProjectInfo | null> {\n  const [\n    configFiles,\n    typescript,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n    packageJson,\n  ] = await Promise.all([\n    glob('**/{nuxt,vite,astro}.config.*|composer.json', {\n      cwd,\n      deep: 3,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    isTypeScriptProject(cwd),\n    getTailwindConfigFile(cwd),\n    getTailwindCssFile(cwd),\n    getTailwindVersion(cwd),\n    getTsConfigAliasPrefix(cwd),\n    getPackageInfo(cwd, false),\n  ])\n\n  const type: ProjectInfo = {\n    framework: FRAMEWORKS.manual,\n    typescript,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n  }\n\n  // Nuxt.\n  if (configFiles.find(file => file.startsWith('nuxt.config.'))?.length) {\n    type.framework = FRAMEWORKS.nuxt\n    return type\n  }\n\n  // Astro.\n  if (configFiles.find(file => file.startsWith('astro.config.'))?.length) {\n    type.framework = FRAMEWORKS.astro\n    return type\n  }\n\n  // Laravel.\n  if (configFiles.find(file => file.startsWith('composer.json'))?.length) {\n    type.framework = FRAMEWORKS.laravel\n    return type\n  }\n\n  // Vite.\n  // We'll assume that it got caught by the Remix check above.\n  if (configFiles.find(file => file.startsWith('vite.config.'))?.length) {\n    type.framework = FRAMEWORKS.vite\n    return type\n  }\n\n  return type\n}\n\nexport async function getTailwindVersion(\n  cwd: string,\n): Promise<ProjectInfo['tailwindVersion']> {\n  const [packageInfo, config] = await Promise.all([\n    getPackageInfo(cwd),\n    getConfig(cwd),\n  ])\n\n  // If the config file is empty, we can assume that it's a v4 project.\n  if (config?.tailwind?.config === '') {\n    return 'v4'\n  }\n\n  if (\n    !packageInfo?.dependencies?.tailwindcss\n    && !packageInfo?.devDependencies?.tailwindcss\n  ) {\n    return null\n  }\n\n  if (\n    /^(?:\\^|~)?3(?:\\.\\d+)*(?:-.*)?$/.test(\n      packageInfo?.dependencies?.tailwindcss\n      || packageInfo?.devDependencies?.tailwindcss\n      || '',\n    )\n  ) {\n    return 'v3'\n  }\n\n  return 'v4'\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const [files, tailwindVersion] = await Promise.all([\n    glob(['**/*.css', '**/*.scss'], {\n      cwd,\n      deep: 5,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    getTailwindVersion(cwd),\n  ])\n\n  if (!files.length) {\n    return null\n  }\n\n  const needle\n    = tailwindVersion === 'v4' ? `@import \"tailwindcss\"` : '@tailwind base'\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), 'utf8')\n    if (\n      contents.includes(`@import \"tailwindcss\"`)\n      || contents.includes(`@import 'tailwindcss'`)\n      || contents.includes(`@tailwind base`)\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\nexport async function getTailwindConfigFile(cwd: string) {\n  const files = await glob('tailwind.config.*', {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  return files[0]\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const isTypescript = await isTypeScriptProject(cwd)\n  const tsconfigType = isTypescript ? 'tsconfig.json' : 'jsconfig.json'\n\n  const tsConfig = getTSConfig(cwd, tsconfigType)\n  const parsedTsConfig = parseTsconfig(tsConfig.path)\n\n  const aliasPaths = parsedTsConfig.compilerOptions?.paths ?? {}\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(aliasPaths)) {\n    if (\n      paths.includes('./*')\n      || paths.includes('./src/*')\n      || paths.includes('./app/*')\n      || paths.includes('./resources/js/*') // Laravel.\n    ) {\n      const cleanAlias = alias.replace(/\\/\\*$/, '') ?? null\n      // handle Nuxt\n      return cleanAlias === '#build' ? '@' : cleanAlias\n    }\n  }\n\n  // Use the first alias as the prefix.\n  return Object.keys(aliasPaths)?.[0]?.replace(/\\/\\*$/, '') ?? null\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  const files = await glob('tsconfig.*', {\n    cwd,\n    deep: 1,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  return files.length > 0\n}\n\nexport async function getTsConfig(cwd: string) {\n  for (const fallback of [\n    'tsconfig.json',\n    'tsconfig.web.json',\n    'tsconfig.app.json',\n  ]) {\n    const filePath = path.resolve(cwd, fallback)\n    if (!(await fs.pathExists(filePath))) {\n      continue\n    }\n\n    // We can't use fs.readJSON because it doesn't support comments.\n    const contents = await fs.readFile(filePath, 'utf8')\n    const cleanedContents = contents.replace(/\\/\\*\\s*\\*\\//g, '')\n    const result = TS_CONFIG_SCHEMA.safeParse(JSON.parse(cleanedContents))\n\n    if (result.error) {\n      continue\n    }\n\n    return result.data\n  }\n\n  return null\n}\n\nexport async function getProjectConfig(\n  cwd: string,\n  defaultProjectInfo: ProjectInfo | null = null,\n): Promise<Config | null> {\n  // Check for existing component config.\n  const [existingConfig, projectInfo] = await Promise.all([\n    getConfig(cwd),\n    !defaultProjectInfo\n      ? getProjectInfo(cwd)\n      : Promise.resolve(defaultProjectInfo),\n  ])\n\n  if (existingConfig) {\n    return existingConfig\n  }\n\n  if (\n    !projectInfo\n    || !projectInfo.tailwindCssFile\n    || (projectInfo.tailwindVersion === 'v3' && !projectInfo.tailwindConfigFile)\n  ) {\n    return null\n  }\n\n  const config: RawConfig = {\n    $schema: 'https://shadcn-vue.com/schema.json',\n    typescript: projectInfo.typescript,\n    style: 'new-york',\n    tailwind: {\n      config: projectInfo.tailwindConfigFile ?? '',\n      baseColor: 'zinc',\n      css: projectInfo.tailwindCssFile,\n      cssVariables: true,\n      prefix: '',\n    },\n    iconLibrary: 'lucide',\n    aliases: {\n      components: `${projectInfo.aliasPrefix}/components`,\n      ui: `${projectInfo.aliasPrefix}/components/ui`,\n      composables: `${projectInfo.aliasPrefix}/composables`,\n      lib: `${projectInfo.aliasPrefix}/lib`,\n      utils: `${projectInfo.aliasPrefix}/lib/utils`,\n    },\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function getProjectTailwindVersionFromConfig(\n  config: Config,\n): Promise<TailwindVersion> {\n  if (!config.resolvedPaths?.cwd) {\n    return 'v3'\n  }\n\n  const projectInfo = await getProjectInfo(config.resolvedPaths.cwd)\n\n  if (!projectInfo?.tailwindVersion) {\n    return null\n  }\n\n  return projectInfo.tailwindVersion\n}\n","import consola from 'consola'\nimport { highlighter } from '@/src/utils/highlighter'\n\nexport const logger = {\n  error(...args: unknown[]) {\n    consola.log(highlighter.error(args.join(' ')))\n  },\n  warn(...args: unknown[]) {\n    consola.log(highlighter.warn(args.join(' ')))\n  },\n  info(...args: unknown[]) {\n    consola.log(highlighter.info(args.join(' ')))\n  },\n  success(...args: unknown[]) {\n    consola.log(highlighter.success(args.join(' ')))\n  },\n  log(...args: unknown[]) {\n    consola.log(args.join(' '))\n  },\n  break() {\n    consola.log('')\n  },\n}\n","import ora, { type Options } from 'ora'\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean\n  },\n) {\n  return ora({\n    text,\n    isSilent: options?.silent,\n  })\n}\n","import { z } from 'zod'\n\n// Note: if you edit the schema here, you must also edit the schema in the\n// apps/www/public/schema/registry-item.json file.\n\nexport const registryItemTypeSchema = z.enum([\n  'registry:lib',\n  'registry:block',\n  'registry:component',\n  'registry:ui',\n  'registry:hook',\n  'registry:composable',\n  'registry:page',\n  'registry:file',\n  'registry:theme',\n  'registry:style',\n\n  // Internal use only\n  'registry:example',\n  'registry:internal',\n])\n\nexport const registryItemFileSchema = z.discriminatedUnion('type', [\n  // Target is required for registry:file and registry:page\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: z.enum(['registry:file', 'registry:page']),\n    target: z.string(),\n  }),\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: registryItemTypeSchema.exclude(['registry:file', 'registry:page']),\n    target: z.string().optional(),\n  }),\n])\n\nexport const registryItemTailwindSchema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registryItemCssVarsSchema = z.object({\n  theme: z.record(z.string(), z.string()).optional(),\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registryItemCssSchema = z.record(\n  z.string(),\n  z.lazy(() =>\n    z.union([\n      z.string(),\n      z.record(\n        z.string(),\n        z.union([z.string(), z.record(z.string(), z.string())]),\n      ),\n    ]),\n  ),\n)\n\nexport const registryItemSchema = z.object({\n  $schema: z.string().optional(),\n  extends: z.string().optional(),\n  name: z.string(),\n  type: registryItemTypeSchema,\n  title: z.string().optional(),\n  author: z.string().min(2).optional(),\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  css: registryItemCssSchema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registryItemSchema>\n\nexport const registrySchema = z.object({\n  name: z.string(),\n  homepage: z.string(),\n  items: z.array(registryItemSchema),\n})\n\nexport type Registry = z.infer<typeof registrySchema>\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  }),\n)\n\nexport const iconsSchema = z.record(\n  z.string(),\n  z.record(z.string(), z.string()),\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: registryItemCssVarsSchema,\n  cssVarsV4: registryItemCssVarsSchema.optional(),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registryResolvedItemsTreeSchema = registryItemSchema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  css: true,\n  docs: true,\n})\n","import { z } from 'zod'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { logger } from '@/src/utils/logger'\n\nexport function handleError(error: unknown) {\n  logger.error(\n    `Something went wrong. Please check the error below for more details.`,\n  )\n  logger.error(`If the problem persists, please open an issue on GitHub.`)\n  logger.error('')\n  if (typeof error === 'string') {\n    logger.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof z.ZodError) {\n    logger.error('Validation failed:')\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(`- ${highlighter.info(key)}: ${value}`)\n    }\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    logger.break()\n    process.exit(1)\n  }\n\n  logger.break()\n  process.exit(1)\n}\n","import type { Config as TailwindConfig } from 'tailwindcss'\nimport type {\n  ArrayLiteralExpression,\n  ObjectLiteralExpression,\n  PropertyAssignment,\n  VariableStatement,\n} from 'ts-morph'\nimport type { z } from 'zod'\nimport type { registryItemCssVarsSchema, registryItemTailwindSchema } from '@/src/registry/schema'\nimport type { Config } from '@/src/utils/get-config'\nimport type { TailwindVersion } from '@/src/utils/get-project-info'\nimport { promises as fs } from 'node:fs'\nimport { tmpdir } from 'node:os'\nimport deepmerge from 'deepmerge'\nimport path from 'pathe'\nimport objectToString from 'stringify-object'\nimport {\n  Project,\n  QuoteKind,\n  ScriptKind,\n  SyntaxKind,\n} from 'ts-morph'\nimport { highlighter } from '@/src/utils/highlighter'\nimport { spinner } from '@/src/utils/spinner'\n\nexport type UpdaterTailwindConfig = Omit<TailwindConfig, 'plugins'> & {\n  // We only want string plugins for now.\n  plugins?: string[]\n}\n\nexport async function updateTailwindConfig(\n  tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>['config']\n    | undefined,\n  config: Config,\n  options: {\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n  },\n) {\n  if (!tailwindConfig) {\n    return\n  }\n\n  options = {\n    silent: false,\n    tailwindVersion: 'v3',\n    ...options,\n  }\n\n  // No tailwind config in v4.\n  if (options.tailwindVersion === 'v4') {\n    return\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig,\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    },\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, 'utf8')\n  const output = await transformTailwindConfig(raw, tailwindConfig, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, 'utf8')\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindConfig(\n  input: string,\n  tailwindConfig: UpdaterTailwindConfig,\n  config: Config,\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find(node =>\n      node\n        .getProperties()\n        .some(\n          property =>\n            property.isKind(SyntaxKind.PropertyAssignment)\n            && property.getName() === 'content',\n        ),\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  const quoteChar = _getQuoteChar(configObject)\n\n  // Add darkMode.\n  addTailwindConfigProperty(\n    configObject,\n    {\n      name: 'darkMode',\n      value: 'class',\n    },\n    { quoteChar },\n  )\n\n  // Add Tailwind config plugins.\n  tailwindConfig.plugins?.forEach((plugin) => {\n    addTailwindConfigPlugin(configObject, plugin)\n  })\n\n  // Add Tailwind config theme.\n  if (tailwindConfig.theme) {\n    await addTailwindConfigTheme(configObject, tailwindConfig.theme)\n  }\n\n  return sourceFile.getFullText()\n}\n\nfunction addTailwindConfigProperty(\n  configObject: ObjectLiteralExpression,\n  property: {\n    name: string\n    value: string\n  },\n  {\n    quoteChar,\n  }: {\n    quoteChar: string\n  },\n) {\n  const existingProperty = configObject.getProperty('darkMode')\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: property.name,\n      initializer: `[${quoteChar}${property.value}${quoteChar}]`,\n    }\n\n    // We need to add darkMode as the first property.\n    if (property.name === 'darkMode') {\n      configObject.insertPropertyAssignment(0, newProperty)\n      return configObject\n    }\n\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n    const newValue = `${quoteChar}${property.value}${quoteChar}`\n\n    // If property is a string, change it to an array and append.\n    if (initializer?.isKind(SyntaxKind.StringLiteral)) {\n      const initializerText = initializer.getText()\n      initializer.replaceWithText(`[${initializerText}, ${newValue}]`)\n      return configObject\n    }\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Check if the array already contains the value.\n      if (\n        initializer\n          .getElements()\n          .map(element => element.getText())\n          .includes(newValue)\n      ) {\n        return configObject\n      }\n      initializer.addElement(newValue)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nasync function addTailwindConfigTheme(\n  configObject: ObjectLiteralExpression,\n  theme: UpdaterTailwindConfig['theme'],\n) {\n  // Ensure there is a theme property.\n  if (!configObject.getProperty('theme')) {\n    configObject.addPropertyAssignment({\n      name: 'theme',\n      initializer: '{}',\n    })\n  }\n\n  // Nest all spread properties.\n  nestSpreadProperties(configObject)\n\n  const themeProperty = configObject\n    .getPropertyOrThrow('theme')\n    ?.asKindOrThrow(SyntaxKind.PropertyAssignment)\n\n  const themeInitializer = themeProperty.getInitializer()\n  if (themeInitializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n    const themeObjectString = themeInitializer.getText()\n    const themeObject = await parseObjectLiteral(themeObjectString)\n    const result = deepmerge(themeObject, theme, {\n      arrayMerge: (dst, src) => src,\n    })\n    const resultString = objectToString(result)\n      .replace(/'\\.\\.\\.(.*)'/g, '...$1') // Remove quote around spread element\n      .replace(/'\"/g, '\\'') // Replace `\\\" with \"\n      .replace(/\"'/g, '\\'') // Replace `\\\" with \"\n      .replace(/'\\[/g, '[') // Replace `[ with [\n      .replace(/\\]'/g, ']') // Replace `] with ]\n      .replace(/'\\\\'/g, '\\'') // Replace `\\' with '\n      .replace(/\\\\'/g, '\\'') // Replace \\' with '\n      .replace(/\\\\''/g, '\\'')\n      .replace(/''/g, '\\'')\n    themeInitializer.replaceWithText(resultString)\n  }\n\n  // Unnest all spread properties.\n  unnestSpreadProperties(configObject)\n}\n\nfunction addTailwindConfigPlugin(\n  configObject: ObjectLiteralExpression,\n  plugin: string,\n) {\n  const existingPlugins = configObject.getProperty('plugins')\n\n  if (!existingPlugins) {\n    configObject.addPropertyAssignment({\n      name: 'plugins',\n      initializer: `[${plugin}]`,\n    })\n\n    return configObject\n  }\n\n  if (existingPlugins.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingPlugins.getInitializer()\n\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      if (\n        initializer\n          .getElements()\n          .map((element) => {\n            return element.getText().replace(/[\"']/g, '')\n          })\n          .includes(plugin.replace(/[\"']/g, ''))\n      ) {\n        return configObject\n      }\n      initializer.addElement(plugin)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nexport async function _createSourceFile(input: string, config: Config | null) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'shadcn-'))\n  const resolvedPath\n    = config?.resolvedPaths?.tailwindConfig || 'tailwind.config.ts'\n  const tempFile = path.join(dir, `shadcn-${path.basename(resolvedPath)}`)\n\n  const project = new Project({\n    compilerOptions: {},\n  })\n  const sourceFile = project.createSourceFile(tempFile, input, {\n    // Note: .js and .mjs can still be valid for TS projects.\n    // We can't infer TypeScript from config.tsx.\n    scriptKind:\n      path.extname(resolvedPath) === '.ts' ? ScriptKind.TS : ScriptKind.JS,\n  })\n\n  return sourceFile\n}\n\nexport function _getQuoteChar(configObject: ObjectLiteralExpression) {\n  return configObject\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\n    ?.getQuoteKind() === QuoteKind.Single\n    ? '\\''\n    : '\"'\n}\n\nexport function nestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.SpreadAssignment)) {\n      const spreadAssignment = prop.asKindOrThrow(SyntaxKind.SpreadAssignment)\n      const spreadText = spreadAssignment.getExpression().getText()\n\n      // Replace spread with a property assignment\n      obj.insertPropertyAssignment(i, {\n        // Need to escape the name with \" so that deepmerge doesn't mishandle the key\n        name: `\"___${spreadText.replace(/^\\.\\.\\./, '')}\"`,\n        initializer: `\"...${spreadText.replace(/^\\.\\.\\./, '')}\"`,\n      })\n\n      // Remove the original spread assignment\n      spreadAssignment.remove()\n    }\n    else if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop.asKindOrThrow(SyntaxKind.PropertyAssignment)\n      const initializer = propAssignment.getInitializer()\n\n      if (\n        initializer\n        && initializer.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        // Recursively process nested object literals\n        nestSpreadProperties(\n          initializer.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n        )\n      }\n      else if (\n        initializer\n        && initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        nestSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        )\n      }\n    }\n  }\n}\n\nexport function nestSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      nestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      nestSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.SpreadElement)) {\n      const spreadText = element.getText()\n      // Spread element within an array\n      arr.removeElement(j)\n      arr.insertElement(j, `\"${spreadText}\"`)\n    }\n  }\n}\n\nexport function unnestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop as PropertyAssignment\n      const initializer = propAssignment.getInitializer()\n\n      if (initializer && initializer.isKind(SyntaxKind.StringLiteral)) {\n        const value = initializer\n          .asKindOrThrow(SyntaxKind.StringLiteral)\n          .getLiteralValue()\n        if (value.startsWith('...')) {\n          obj.insertSpreadAssignment(i, { expression: value.slice(3) })\n          propAssignment.remove()\n        }\n      }\n      else if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        unnestSpreadProperties(initializer as ObjectLiteralExpression)\n      }\n      else if (\n        initializer\n        && initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        unnsetSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        )\n      }\n    }\n  }\n}\n\nexport function unnsetSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      unnestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      unnsetSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n      )\n    }\n    else if (element.isKind(SyntaxKind.StringLiteral)) {\n      const spreadText = element.getText()\n      // check if spread element\n      const spreadTest = /^['\"](\\.\\.\\..*)['\"]$/g\n      if (spreadTest.test(spreadText)) {\n        arr.removeElement(j)\n        arr.insertElement(j, spreadText.replace(spreadTest, '$1'))\n      }\n    }\n  }\n}\n\nasync function parseObjectLiteral(objectLiteralString: string): Promise<any> {\n  const sourceFile = await _createSourceFile(\n    `const theme = ${objectLiteralString}`,\n    null,\n  )\n\n  const statement = sourceFile.getStatements()[0]\n  if (statement?.getKind() === SyntaxKind.VariableStatement) {\n    const declaration = (statement as VariableStatement)\n      .getDeclarationList()\n      ?.getDeclarations()[0]\n    const initializer = declaration.getInitializer()\n    if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      return await parseObjectLiteralExpression(initializer)\n    }\n  }\n\n  throw new Error('Invalid input: not an object literal')\n}\n\nfunction parseObjectLiteralExpression(node: ObjectLiteralExpression): any {\n  const result: any = {}\n  for (const property of node.getProperties()) {\n    if (property.isKind(SyntaxKind.PropertyAssignment)) {\n      const name = property.getName().replace(/'/g, '')\n      if (\n        property.getInitializer()?.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        result[name] = parseObjectLiteralExpression(\n          property.getInitializer() as ObjectLiteralExpression,\n        )\n      }\n      else if (\n        property.getInitializer()?.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        result[name] = parseArrayLiteralExpression(\n          property.getInitializer() as ArrayLiteralExpression,\n        )\n      }\n      else {\n        result[name] = parseValue(property.getInitializer())\n      }\n    }\n  }\n  return result\n}\n\nfunction parseArrayLiteralExpression(node: ArrayLiteralExpression): any[] {\n  const result: any[] = []\n  for (const element of node.getElements()) {\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      result.push(\n        parseObjectLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression),\n        ),\n      )\n    }\n    else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      result.push(\n        parseArrayLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression),\n        ),\n      )\n    }\n    else {\n      result.push(parseValue(element))\n    }\n  }\n  return result\n}\n\nfunction parseValue(node: any): any {\n  switch (node.getKind()) {\n    case SyntaxKind.StringLiteral:\n      return node.getText()\n    case SyntaxKind.NumericLiteral:\n      return Number(node.getText())\n    case SyntaxKind.TrueKeyword:\n      return true\n    case SyntaxKind.FalseKeyword:\n      return false\n    case SyntaxKind.NullKeyword:\n      return null\n    case SyntaxKind.ArrayLiteralExpression:\n      return node.getElements().map(parseValue)\n    case SyntaxKind.ObjectLiteralExpression:\n      return parseObjectLiteralExpression(node)\n    default:\n      return node.getText()\n  }\n}\n\nexport function buildTailwindThemeColorsFromCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n) {\n  const result: Record<string, any> = {}\n\n  for (const key of Object.keys(cssVars)) {\n    const parts = key.split('-')\n    const colorName = parts[0]\n    const subType = parts.slice(1).join('-')\n\n    if (subType === '') {\n      if (typeof result[colorName] === 'object') {\n        result[colorName].DEFAULT = `hsl(var(--${key}))`\n      }\n      else {\n        result[colorName] = `hsl(var(--${key}))`\n      }\n    }\n    else {\n      if (typeof result[colorName] !== 'object') {\n        result[colorName] = { DEFAULT: `hsl(var(--${colorName}))` }\n      }\n      result[colorName][subType] = `hsl(var(--${key}))`\n    }\n  }\n\n  // Remove DEFAULT if it's not in the original cssVars\n  for (const [colorName, value] of Object.entries(result)) {\n    if (\n      typeof value === 'object'\n      && value.DEFAULT === `hsl(var(--${colorName}))`\n      && !(colorName in cssVars)\n    ) {\n      delete value.DEFAULT\n    }\n  }\n\n  return result\n}\n","/* eslint-disable prefer-const */\nimport deepmerge from 'deepmerge'\nimport { ofetch } from 'ofetch'\nimport path from 'pathe'\nimport { ProxyAgent } from 'undici'\nimport { z } from 'zod'\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from '@/src/registry/schema'\nimport { type Config, getTargetStyleFromConfig } from '@/src/utils/get-config'\nimport { getProjectTailwindVersionFromConfig } from '@/src/utils/get-project-info'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport { buildTailwindThemeColorsFromCssVars } from '@/src/utils/updaters/update-tailwind-config'\nimport { highlighter } from '../utils/highlighter'\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? 'https://shadcn-vue.com/r'\n\nconst agent = process.env.https_proxy\n  ? new ProxyAgent(process.env.https_proxy)\n  : undefined\n\nconst registryCache = new Map<string, Promise<any>>()\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry(['index.json'])\n\n    return registryIndexSchema.parse(result)\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry(['styles/index.json'])\n\n    return stylesSchema.parse(result)\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n    return []\n  }\n}\n\nexport async function getRegistryIcons() {\n  try {\n    const [result] = await fetchRegistry(['icons/index.json'])\n    return iconsSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n    return {}\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  }\n  catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport const BASE_COLORS = [\n  {\n    name: 'neutral',\n    label: 'Neutral',\n  },\n  {\n    name: 'gray',\n    label: 'Gray',\n  },\n  {\n    name: 'zinc',\n    label: 'Zinc',\n  },\n  {\n    name: 'stone',\n    label: 'Stone',\n  },\n  {\n    name: 'slate',\n    label: 'Slate',\n  },\n] as const\n\nexport async function getRegistryBaseColors() {\n  return BASE_COLORS\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[],\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find(entry => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex(c => c.name === component.name) === index,\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>,\n) {\n  try {\n    const paths = tree.map(item => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  }\n  catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, 'type'>,\n  override?: string,\n) {\n  if (override) {\n    return override\n  }\n\n  if (item.type === 'registry:ui') {\n    return config.resolvedPaths.ui ?? config.resolvedPaths.components\n  }\n\n  const [parent, type] = item.type?.split(':') ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type,\n  )\n}\n\nexport async function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n\n        // Check cache first\n        if (registryCache.has(url)) {\n          return registryCache.get(url)\n        }\n\n        // Store the promise in the cache before awaiting\n        const fetchPromise = ofetch(url, {\n          dispatcher: agent,\n          parseResponse: JSON.parse,\n        }).catch((error) => {\n          // Handle ofetch errors\n          const status = error.status || error.statusCode\n\n          if (status === 401) {\n            throw new Error(\n              `You are not authorized to access the component at ${highlighter.info(\n                url,\n              )}.\\nIf this is a remote registry, you may need to authenticate.`,\n            )\n          }\n\n          if (status === 404) {\n            throw new Error(\n              `The component at ${highlighter.info(\n                url,\n              )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`,\n            )\n          }\n\n          if (status === 403) {\n            throw new Error(\n              `You do not have access to the component at ${highlighter.info(\n                url,\n              )}.\\nIf this is a remote registry, you may need to authenticate or a token.`,\n            )\n          }\n\n          const message = error.data?.error || error.message || `HTTP ${status || 'Unknown'} Error`\n          throw new Error(\n            `Failed to fetch from ${highlighter.info(url)}.\\n${message}`,\n          )\n        })\n\n        registryCache.set(url, fetchPromise)\n        return fetchPromise\n      }),\n    )\n\n    return results\n  }\n  catch (error) {\n    logger.error('\\n')\n    handleError(error)\n    return []\n  }\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>['name'][],\n  config: Config,\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes('index')) {\n      names.unshift('index')\n    }\n\n    let registryItems = await resolveRegistryItems(names, config)\n    let result = await fetchRegistry(registryItems)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    // If we're resolving the index, we want to fetch\n    // the theme item if a base color is provided.\n    // We do this for index only.\n    // Other components will ship with their theme tokens.\n    if (names.includes('index')) {\n      if (config.tailwind.baseColor) {\n        const theme = await registryGetTheme(config.tailwind.baseColor, config)\n        if (theme) {\n          payload.unshift(theme)\n        }\n      }\n    }\n\n    // Sort the payload so that registry:theme is always first.\n    payload.sort((a, b) => {\n      if (a.type === 'registry:theme') {\n        return -1\n      }\n      return 1\n    })\n\n    let tailwind = {}\n    payload.forEach((item) => {\n      tailwind = deepmerge(tailwind, item.tailwind ?? {})\n    })\n\n    let cssVars = {}\n    payload.forEach((item) => {\n      cssVars = deepmerge(cssVars, item.cssVars ?? {})\n    })\n\n    let css = {}\n    payload.forEach((item) => {\n      css = deepmerge(css, item.css ?? {})\n    })\n\n    let docs = ''\n    payload.forEach((item) => {\n      if (item.docs) {\n        docs += `${item.docs}\\n`\n      }\n    })\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: deepmerge.all(\n        payload.map(item => item.dependencies ?? []),\n      ),\n      devDependencies: deepmerge.all(\n        payload.map(item => item.devDependencies ?? []),\n      ),\n      files: deepmerge.all(payload.map(item => item.files ?? [])),\n      tailwind,\n      cssVars,\n      css,\n      docs,\n    })\n  }\n  catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config,\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  const style = config.resolvedPaths?.cwd\n    ? await getTargetStyleFromConfig(config.resolvedPaths.cwd, config.style)\n    : config.style\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(\n      isUrl(itemUrl) ? itemUrl : `styles/${style}/${itemUrl}.json`,\n    )\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    }\n    catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error,\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nexport async function registryGetTheme(name: string, config: Config) {\n  const [baseColor, tailwindVersion] = await Promise.all([\n    getRegistryBaseColor(name),\n    getProjectTailwindVersionFromConfig(config),\n  ])\n  if (!baseColor) {\n    return null\n  }\n\n  // TODO: Move this to the registry i.e registry:theme.\n  const theme = {\n    name,\n    type: 'registry:theme',\n    tailwind: {\n      config: {\n        theme: {\n          extend: {\n            borderRadius: {\n              lg: 'var(--radius)',\n              md: 'calc(var(--radius) - 2px)',\n              sm: 'calc(var(--radius) - 4px)',\n            },\n            colors: {},\n          },\n        },\n      },\n    },\n    cssVars: {\n      theme: {},\n      light: {\n        radius: '0.5rem',\n      },\n      dark: {},\n    },\n  } satisfies z.infer<typeof registryItemSchema>\n\n  if (config.tailwind.cssVariables) {\n    theme.tailwind.config.theme.extend.colors = {\n      ...theme.tailwind.config.theme.extend.colors,\n      ...buildTailwindThemeColorsFromCssVars(baseColor.cssVars.dark ?? {}),\n    }\n    theme.cssVars = {\n      theme: {\n        ...baseColor.cssVars.theme,\n        ...theme.cssVars.theme,\n      },\n      light: {\n        ...baseColor.cssVars.light,\n        ...theme.cssVars.light,\n      },\n      dark: {\n        ...baseColor.cssVars.dark,\n        ...theme.cssVars.dark,\n      },\n    }\n\n    if (tailwindVersion === 'v4' && baseColor.cssVarsV4) {\n      theme.cssVars = {\n        theme: {\n          ...baseColor.cssVarsV4.theme,\n          ...theme.cssVars.theme,\n        },\n        light: {\n          ...theme.cssVars.light,\n          ...baseColor.cssVarsV4.light,\n        },\n        dark: {\n          ...theme.cssVars.dark,\n          ...baseColor.cssVarsV4.dark,\n        },\n      }\n    }\n  }\n\n  return theme\n}\n\nexport function clearRegistryCache() {\n  registryCache.clear()\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith('/json')) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nexport function isUrl(path: string) {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(path)\n    return true\n  }\n  catch (error) {\n    return false\n  }\n}\n\n// TODO: We're double-fetching here. Use a cache.\nexport async function resolveRegistryItems(names: string[], config: Config) {\n  const registryDependencies: string[] = []\n  for (const name of names) {\n    const itemRegistryDependencies = await resolveRegistryDependencies(\n      name,\n      config,\n    )\n    registryDependencies.push(...itemRegistryDependencies)\n  }\n\n  return Array.from(new Set(registryDependencies))\n}\n\nexport function getRegistryTypeAliasMap() {\n  return new Map<string, string>([\n    ['registry:ui', 'ui'],\n    ['registry:lib', 'lib'],\n    ['registry:hook', 'hooks'],\n    ['registry:composable', 'composable'],\n    ['registry:block', 'components'],\n    ['registry:component', 'components'],\n  ])\n}\n\n// Track a dependency and its parent.\nexport function getRegistryParentMap(\n  registryItems: z.infer<typeof registryItemSchema>[],\n) {\n  const map = new Map<string, z.infer<typeof registryItemSchema>>()\n  registryItems.forEach((item) => {\n    if (!item.registryDependencies) {\n      return\n    }\n\n    item.registryDependencies.forEach((dependency) => {\n      map.set(dependency, item)\n    })\n  })\n  return map\n}\n"],"mappings":"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"}