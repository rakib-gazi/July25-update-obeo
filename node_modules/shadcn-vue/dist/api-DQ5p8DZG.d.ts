import { z } from "zod";
import "get-tsconfig";

//#region src/registry/schema.d.ts
declare const registryItemTypeSchema: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:page", "registry:file", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
declare const registryItemFileSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
  path: z.ZodString;
  content: z.ZodOptional<z.ZodString>;
  type: z.ZodEnum<["registry:file", "registry:page"]>;
  target: z.ZodString;
}, "strip", z.ZodTypeAny, {
  type: "registry:page" | "registry:file";
  path: string;
  target: string;
  content?: string | undefined;
}, {
  type: "registry:page" | "registry:file";
  path: string;
  target: string;
  content?: string | undefined;
}>, z.ZodObject<{
  path: z.ZodString;
  content: z.ZodOptional<z.ZodString>;
  type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
  target: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  path: string;
  content?: string | undefined;
  target?: string | undefined;
}, {
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  path: string;
  content?: string | undefined;
  target?: string | undefined;
}>]>;
declare const registryItemTailwindSchema: z.ZodObject<{
  config: z.ZodOptional<z.ZodObject<{
    content: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    plugins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  }, "strip", z.ZodTypeAny, {
    content?: string[] | undefined;
    theme?: Record<string, any> | undefined;
    plugins?: string[] | undefined;
  }, {
    content?: string[] | undefined;
    theme?: Record<string, any> | undefined;
    plugins?: string[] | undefined;
  }>>;
}, "strip", z.ZodTypeAny, {
  config?: {
    content?: string[] | undefined;
    theme?: Record<string, any> | undefined;
    plugins?: string[] | undefined;
  } | undefined;
}, {
  config?: {
    content?: string[] | undefined;
    theme?: Record<string, any> | undefined;
    plugins?: string[] | undefined;
  } | undefined;
}>;
declare const registryItemCssVarsSchema: z.ZodObject<{
  theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
  theme?: Record<string, string> | undefined;
  light?: Record<string, string> | undefined;
  dark?: Record<string, string> | undefined;
}, {
  theme?: Record<string, string> | undefined;
  light?: Record<string, string> | undefined;
  dark?: Record<string, string> | undefined;
}>;
declare const registryItemCssSchema: z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>;
declare const registryItemSchema: z.ZodObject<{
  $schema: z.ZodOptional<z.ZodString>;
  extends: z.ZodOptional<z.ZodString>;
  name: z.ZodString;
  type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:page", "registry:file", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
  title: z.ZodOptional<z.ZodString>;
  author: z.ZodOptional<z.ZodString>;
  description: z.ZodOptional<z.ZodString>;
  dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  devDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  registryDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  files: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:file", "registry:page"]>;
    target: z.ZodString;
  }, "strip", z.ZodTypeAny, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }>, z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
    target: z.ZodOptional<z.ZodString>;
  }, "strip", z.ZodTypeAny, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }>]>, "many">>;
  tailwind: z.ZodOptional<z.ZodObject<{
    config: z.ZodOptional<z.ZodObject<{
      content: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
      theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
      plugins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }>>;
  }, "strip", z.ZodTypeAny, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }>>;
  cssVars: z.ZodOptional<z.ZodObject<{
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }>>;
  css: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>>;
  meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
  docs: z.ZodOptional<z.ZodString>;
  categories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}, {
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}>;
type RegistryItem = z.infer<typeof registryItemSchema>;
declare const registrySchema: z.ZodObject<{
  name: z.ZodString;
  homepage: z.ZodString;
  items: z.ZodArray<z.ZodObject<{
    $schema: z.ZodOptional<z.ZodString>;
    extends: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:page", "registry:file", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
    title: z.ZodOptional<z.ZodString>;
    author: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    devDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    registryDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    files: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
      path: z.ZodString;
      content: z.ZodOptional<z.ZodString>;
      type: z.ZodEnum<["registry:file", "registry:page"]>;
      target: z.ZodString;
    }, "strip", z.ZodTypeAny, {
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    }, {
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    }>, z.ZodObject<{
      path: z.ZodString;
      content: z.ZodOptional<z.ZodString>;
      type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
      target: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    }, {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    }>]>, "many">>;
    tailwind: z.ZodOptional<z.ZodObject<{
      config: z.ZodOptional<z.ZodObject<{
        content: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        plugins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
      }, "strip", z.ZodTypeAny, {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      }, {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      }>>;
    }, "strip", z.ZodTypeAny, {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    }, {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    }>>;
    cssVars: z.ZodOptional<z.ZodObject<{
      theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
      light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
      dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    }, {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    }>>;
    css: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>>;
    meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    docs: z.ZodOptional<z.ZodString>;
    categories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  }, "strip", z.ZodTypeAny, {
    name: string;
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    $schema?: string | undefined;
    extends?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    description?: string | undefined;
    dependencies?: string[] | undefined;
    devDependencies?: string[] | undefined;
    registryDependencies?: string[] | undefined;
    files?: ({
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    } | {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    })[] | undefined;
    tailwind?: {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    } | undefined;
    cssVars?: {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    } | undefined;
    css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
    meta?: Record<string, any> | undefined;
    docs?: string | undefined;
    categories?: string[] | undefined;
  }, {
    name: string;
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    $schema?: string | undefined;
    extends?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    description?: string | undefined;
    dependencies?: string[] | undefined;
    devDependencies?: string[] | undefined;
    registryDependencies?: string[] | undefined;
    files?: ({
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    } | {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    })[] | undefined;
    tailwind?: {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    } | undefined;
    cssVars?: {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    } | undefined;
    css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
    meta?: Record<string, any> | undefined;
    docs?: string | undefined;
    categories?: string[] | undefined;
  }>, "many">;
}, "strip", z.ZodTypeAny, {
  name: string;
  homepage: string;
  items: {
    name: string;
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    $schema?: string | undefined;
    extends?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    description?: string | undefined;
    dependencies?: string[] | undefined;
    devDependencies?: string[] | undefined;
    registryDependencies?: string[] | undefined;
    files?: ({
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    } | {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    })[] | undefined;
    tailwind?: {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    } | undefined;
    cssVars?: {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    } | undefined;
    css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
    meta?: Record<string, any> | undefined;
    docs?: string | undefined;
    categories?: string[] | undefined;
  }[];
}, {
  name: string;
  homepage: string;
  items: {
    name: string;
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    $schema?: string | undefined;
    extends?: string | undefined;
    title?: string | undefined;
    author?: string | undefined;
    description?: string | undefined;
    dependencies?: string[] | undefined;
    devDependencies?: string[] | undefined;
    registryDependencies?: string[] | undefined;
    files?: ({
      type: "registry:page" | "registry:file";
      path: string;
      target: string;
      content?: string | undefined;
    } | {
      type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
      path: string;
      content?: string | undefined;
      target?: string | undefined;
    })[] | undefined;
    tailwind?: {
      config?: {
        content?: string[] | undefined;
        theme?: Record<string, any> | undefined;
        plugins?: string[] | undefined;
      } | undefined;
    } | undefined;
    cssVars?: {
      theme?: Record<string, string> | undefined;
      light?: Record<string, string> | undefined;
      dark?: Record<string, string> | undefined;
    } | undefined;
    css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
    meta?: Record<string, any> | undefined;
    docs?: string | undefined;
    categories?: string[] | undefined;
  }[];
}>;
type Registry = z.infer<typeof registrySchema>;
declare const registryIndexSchema: z.ZodArray<z.ZodObject<{
  $schema: z.ZodOptional<z.ZodString>;
  extends: z.ZodOptional<z.ZodString>;
  name: z.ZodString;
  type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:page", "registry:file", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
  title: z.ZodOptional<z.ZodString>;
  author: z.ZodOptional<z.ZodString>;
  description: z.ZodOptional<z.ZodString>;
  dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  devDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  registryDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  files: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:file", "registry:page"]>;
    target: z.ZodString;
  }, "strip", z.ZodTypeAny, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }>, z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
    target: z.ZodOptional<z.ZodString>;
  }, "strip", z.ZodTypeAny, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }>]>, "many">>;
  tailwind: z.ZodOptional<z.ZodObject<{
    config: z.ZodOptional<z.ZodObject<{
      content: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
      theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
      plugins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }>>;
  }, "strip", z.ZodTypeAny, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }>>;
  cssVars: z.ZodOptional<z.ZodObject<{
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }>>;
  css: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>>;
  meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
  docs: z.ZodOptional<z.ZodString>;
  categories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}, {
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}>, "many">;
declare const stylesSchema: z.ZodArray<z.ZodObject<{
  name: z.ZodString;
  label: z.ZodString;
}, "strip", z.ZodTypeAny, {
  name: string;
  label: string;
}, {
  name: string;
  label: string;
}>, "many">;
declare const iconsSchema: z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>>;
declare const registryBaseColorSchema: z.ZodObject<{
  inlineColors: z.ZodObject<{
    light: z.ZodRecord<z.ZodString, z.ZodString>;
    dark: z.ZodRecord<z.ZodString, z.ZodString>;
  }, "strip", z.ZodTypeAny, {
    light: Record<string, string>;
    dark: Record<string, string>;
  }, {
    light: Record<string, string>;
    dark: Record<string, string>;
  }>;
  cssVars: z.ZodObject<{
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }>;
  cssVarsV4: z.ZodOptional<z.ZodObject<{
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }>>;
  inlineColorsTemplate: z.ZodString;
  cssVarsTemplate: z.ZodString;
}, "strip", z.ZodTypeAny, {
  cssVars: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  };
  inlineColors: {
    light: Record<string, string>;
    dark: Record<string, string>;
  };
  inlineColorsTemplate: string;
  cssVarsTemplate: string;
  cssVarsV4?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
}, {
  cssVars: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  };
  inlineColors: {
    light: Record<string, string>;
    dark: Record<string, string>;
  };
  inlineColorsTemplate: string;
  cssVarsTemplate: string;
  cssVarsV4?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
}>;
declare const registryResolvedItemsTreeSchema: z.ZodObject<Pick<{
  $schema: z.ZodOptional<z.ZodString>;
  extends: z.ZodOptional<z.ZodString>;
  name: z.ZodString;
  type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:page", "registry:file", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
  title: z.ZodOptional<z.ZodString>;
  author: z.ZodOptional<z.ZodString>;
  description: z.ZodOptional<z.ZodString>;
  dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  devDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  registryDependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
  files: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:file", "registry:page"]>;
    target: z.ZodString;
  }, "strip", z.ZodTypeAny, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }, {
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  }>, z.ZodObject<{
    path: z.ZodString;
    content: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["registry:lib", "registry:block", "registry:component", "registry:ui", "registry:hook", "registry:composable", "registry:theme", "registry:style", "registry:example", "registry:internal"]>;
    target: z.ZodOptional<z.ZodString>;
  }, "strip", z.ZodTypeAny, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }, {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  }>]>, "many">>;
  tailwind: z.ZodOptional<z.ZodObject<{
    config: z.ZodOptional<z.ZodObject<{
      content: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
      theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
      plugins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }, {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    }>>;
  }, "strip", z.ZodTypeAny, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }, {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  }>>;
  cssVars: z.ZodOptional<z.ZodObject<{
    theme: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    light: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    dark: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }, {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  }>>;
  css: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodLazy<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>]>>>>;
  meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
  docs: z.ZodOptional<z.ZodString>;
  categories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "dependencies" | "devDependencies" | "files" | "tailwind" | "cssVars" | "css" | "docs">, "strip", z.ZodTypeAny, {
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  docs?: string | undefined;
}, {
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  docs?: string | undefined;
}>; //#endregion
//#region src/utils/get-config.d.ts

//# sourceMappingURL=schema.d.ts.map
declare const configSchema: z.ZodObject<{
  $schema: z.ZodOptional<z.ZodString>;
  style: z.ZodString;
  typescript: z.ZodDefault<z.ZodBoolean>;
  tailwind: z.ZodObject<{
    config: z.ZodOptional<z.ZodString>;
    css: z.ZodString;
    baseColor: z.ZodString;
    cssVariables: z.ZodDefault<z.ZodBoolean>;
    prefix: z.ZodOptional<z.ZodDefault<z.ZodString>>;
  }, "strip", z.ZodTypeAny, {
    css: string;
    baseColor: string;
    cssVariables: boolean;
    config?: string | undefined;
    prefix?: string | undefined;
  }, {
    css: string;
    baseColor: string;
    config?: string | undefined;
    cssVariables?: boolean | undefined;
    prefix?: string | undefined;
  }>;
  aliases: z.ZodObject<{
    components: z.ZodString;
    composables: z.ZodOptional<z.ZodString>;
    utils: z.ZodString;
    ui: z.ZodOptional<z.ZodString>;
    lib: z.ZodOptional<z.ZodString>;
  }, "strip", z.ZodTypeAny, {
    components: string;
    utils: string;
    composables?: string | undefined;
    ui?: string | undefined;
    lib?: string | undefined;
  }, {
    components: string;
    utils: string;
    composables?: string | undefined;
    ui?: string | undefined;
    lib?: string | undefined;
  }>;
  iconLibrary: z.ZodOptional<z.ZodString>;
} & {
  resolvedPaths: z.ZodObject<{
    cwd: z.ZodString;
    tailwindConfig: z.ZodString;
    tailwindCss: z.ZodString;
    utils: z.ZodString;
    components: z.ZodString;
    composables: z.ZodString;
    lib: z.ZodString;
    ui: z.ZodString;
  }, "strip", z.ZodTypeAny, {
    components: string;
    composables: string;
    utils: string;
    ui: string;
    lib: string;
    cwd: string;
    tailwindConfig: string;
    tailwindCss: string;
  }, {
    components: string;
    composables: string;
    utils: string;
    ui: string;
    lib: string;
    cwd: string;
    tailwindConfig: string;
    tailwindCss: string;
  }>;
}, "strict", z.ZodTypeAny, {
  tailwind: {
    css: string;
    baseColor: string;
    cssVariables: boolean;
    config?: string | undefined;
    prefix?: string | undefined;
  };
  style: string;
  typescript: boolean;
  aliases: {
    components: string;
    utils: string;
    composables?: string | undefined;
    ui?: string | undefined;
    lib?: string | undefined;
  };
  resolvedPaths: {
    components: string;
    composables: string;
    utils: string;
    ui: string;
    lib: string;
    cwd: string;
    tailwindConfig: string;
    tailwindCss: string;
  };
  $schema?: string | undefined;
  iconLibrary?: string | undefined;
}, {
  tailwind: {
    css: string;
    baseColor: string;
    config?: string | undefined;
    cssVariables?: boolean | undefined;
    prefix?: string | undefined;
  };
  style: string;
  aliases: {
    components: string;
    utils: string;
    composables?: string | undefined;
    ui?: string | undefined;
    lib?: string | undefined;
  };
  resolvedPaths: {
    components: string;
    composables: string;
    utils: string;
    ui: string;
    lib: string;
    cwd: string;
    tailwindConfig: string;
    tailwindCss: string;
  };
  $schema?: string | undefined;
  typescript?: boolean | undefined;
  iconLibrary?: string | undefined;
}>;
type Config = z.infer<typeof configSchema>;

//#endregion
//#region src/registry/api.d.ts
declare function getRegistryIndex(): Promise<{
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}[] | undefined>;
declare function getRegistryStyles(): Promise<{
  name: string;
  label: string;
}[]>;
declare function getRegistryIcons(): Promise<Record<string, Record<string, string>>>;
declare function getRegistryItem(name: string, style: string): Promise<{
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
} | null>;
declare const BASE_COLORS: readonly [{
  readonly name: "neutral";
  readonly label: "Neutral";
}, {
  readonly name: "gray";
  readonly label: "Gray";
}, {
  readonly name: "zinc";
  readonly label: "Zinc";
}, {
  readonly name: "stone";
  readonly label: "Stone";
}, {
  readonly name: "slate";
  readonly label: "Slate";
}];
declare function getRegistryBaseColors(): Promise<readonly [{
  readonly name: "neutral";
  readonly label: "Neutral";
}, {
  readonly name: "gray";
  readonly label: "Gray";
}, {
  readonly name: "zinc";
  readonly label: "Zinc";
}, {
  readonly name: "stone";
  readonly label: "Stone";
}, {
  readonly name: "slate";
  readonly label: "Slate";
}]>;
declare function getRegistryBaseColor(baseColor: string): Promise<{
  cssVars: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  };
  inlineColors: {
    light: Record<string, string>;
    dark: Record<string, string>;
  };
  inlineColorsTemplate: string;
  cssVarsTemplate: string;
  cssVarsV4?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
} | undefined>;
declare function resolveTree(index: z.infer<typeof registryIndexSchema>, names: string[]): Promise<{
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}[]>;
declare function fetchTree(style: string, tree: z.infer<typeof registryIndexSchema>): Promise<{
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}[] | undefined>;
declare function getItemTargetPath(config: Config, item: Pick<z.infer<typeof registryItemSchema>, 'type'>, override?: string): Promise<string | null>;
declare function fetchRegistry(paths: string[]): Promise<any[]>;
declare function registryResolveItemsTree(names: z.infer<typeof registryItemSchema>['name'][], config: Config): Promise<{
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  docs?: string | undefined;
} | null>;
declare function registryGetTheme(name: string, config: Config): Promise<{
  name: string;
  type: "registry:theme";
  tailwind: {
    config: {
      theme: {
        extend: {
          borderRadius: {
            lg: string;
            md: string;
            sm: string;
          };
          colors: {};
        };
      };
    };
  };
  cssVars: {
    theme: {};
    light: {
      radius: string;
    };
    dark: {};
  };
} | null>;
declare function clearRegistryCache(): void;
declare function isUrl(path: string): boolean;
declare function resolveRegistryItems(names: string[], config: Config): Promise<string[]>;
declare function getRegistryTypeAliasMap(): Map<string, string>;
declare function getRegistryParentMap(registryItems: z.infer<typeof registryItemSchema>[]): Map<string, {
  name: string;
  type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:page" | "registry:file" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
  $schema?: string | undefined;
  extends?: string | undefined;
  title?: string | undefined;
  author?: string | undefined;
  description?: string | undefined;
  dependencies?: string[] | undefined;
  devDependencies?: string[] | undefined;
  registryDependencies?: string[] | undefined;
  files?: ({
    type: "registry:page" | "registry:file";
    path: string;
    target: string;
    content?: string | undefined;
  } | {
    type: "registry:lib" | "registry:block" | "registry:component" | "registry:ui" | "registry:hook" | "registry:composable" | "registry:theme" | "registry:style" | "registry:example" | "registry:internal";
    path: string;
    content?: string | undefined;
    target?: string | undefined;
  })[] | undefined;
  tailwind?: {
    config?: {
      content?: string[] | undefined;
      theme?: Record<string, any> | undefined;
      plugins?: string[] | undefined;
    } | undefined;
  } | undefined;
  cssVars?: {
    theme?: Record<string, string> | undefined;
    light?: Record<string, string> | undefined;
    dark?: Record<string, string> | undefined;
  } | undefined;
  css?: Record<string, string | Record<string, string | Record<string, string>>> | undefined;
  meta?: Record<string, any> | undefined;
  docs?: string | undefined;
  categories?: string[] | undefined;
}>;

//#endregion
//# sourceMappingURL=api.d.ts.map

export { BASE_COLORS as BASE_COLORS$1, Registry, RegistryItem, clearRegistryCache as clearRegistryCache$1, fetchRegistry as fetchRegistry$1, fetchTree as fetchTree$1, getItemTargetPath as getItemTargetPath$1, getRegistryBaseColor as getRegistryBaseColor$1, getRegistryBaseColors as getRegistryBaseColors$1, getRegistryIcons as getRegistryIcons$1, getRegistryIndex as getRegistryIndex$1, getRegistryItem as getRegistryItem$1, getRegistryParentMap as getRegistryParentMap$1, getRegistryStyles as getRegistryStyles$1, getRegistryTypeAliasMap as getRegistryTypeAliasMap$1, iconsSchema as iconsSchema$1, isUrl as isUrl$1, registryBaseColorSchema as registryBaseColorSchema$1, registryGetTheme as registryGetTheme$1, registryIndexSchema as registryIndexSchema$1, registryItemCssSchema as registryItemCssSchema$1, registryItemCssVarsSchema as registryItemCssVarsSchema$1, registryItemFileSchema as registryItemFileSchema$1, registryItemSchema as registryItemSchema$1, registryItemTailwindSchema as registryItemTailwindSchema$1, registryItemTypeSchema as registryItemTypeSchema$1, registryResolveItemsTree as registryResolveItemsTree$1, registryResolvedItemsTreeSchema as registryResolvedItemsTreeSchema$1, registrySchema as registrySchema$1, resolveRegistryItems as resolveRegistryItems$1, resolveTree as resolveTree$1, stylesSchema as stylesSchema$1 };
//# sourceMappingURL=api-DQ5p8DZG.d.ts.map